from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command,ChatMemberUpdatedFilter
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, JOIN_TRANSITION, LEAVE_TRANSITION
from aiogram.types import Message, CallbackQuery, ContentType, ChatMemberUpdated, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import app.database.db as db
import app.keyboards as kb

import re
import asyncio

rt = Router()

class Post(StatesGroup):
    post = State()

@rt.message(CommandStart())
async def start(message: Message):
    tg_id = message.from_user.id
    first_name = message.from_user.first_name
    await db.set_user(tg_id, first_name)
    await message.answer('–ë–æ—Ç-–ø—Ä–µ–¥–ª–æ–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!', reply_markup=await kb.get_main(tg_id))

@rt.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION))
async def bot_added(event: ChatMemberUpdated, bot: Bot):
    tg_id = event.chat.id
    channel_name = event.chat.title
    await db.add_channel(tg_id, channel_name)
    await bot.send_message(chat_id=1175527638, text=f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª!\n –ù–∞–∑–≤–∞–Ω–∏–µ: {event.chat.title}\n id: {event.chat.id}")

@rt.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=LEAVE_TRANSITION))
async def bot_added(event: ChatMemberUpdated, bot: Bot):
    tg_id = event.chat.id
    channel_name = event.chat.title
    await db.delete_channel(tg_id)
    await bot.send_message(chat_id=1175527638, text=f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞!\n –ù–∞–∑–≤–∞–Ω–∏–µ: {event.chat.title}\n id: {event.chat.id}")

@rt.callback_query(F.data == 'send_post')
async def post(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞')
    await state.set_state(Post.post)
    await callback.message.answer('–ü–†–ò–®–õ–ò –°–í–û–ô –ü–û–°–¢\n–∞—É–¥–∏–æ, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –Ω–µ –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–∞')

@rt.message(Command('cancel'))
async def cancel_post(message: Message, state: FSMContext):
    if state is None:
        pass

    await state.clear()
    await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ—Å—Ç!', reply_markup=await kb.get_main(tg_id=message.from_user.id))

@rt.message(Post.post, F.photo)
async def photo_message(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data('')
        tg_id = message.from_user.id
        media_id = f"{message.photo[-1].file_id}"
        caption = message.caption
        post_type = 2
        first_name = message.from_user.first_name
        await db.create_post(tg_id, first_name, caption, post_type, media_id)
        await message.answer("–¢–≤–æ–π –ø–æ—Å—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!", reply_markup=await kb.get_main(tg_id))
        await state.clear()


@rt.message(Post.post, F.video)
async def video_message(message: Message, state: FSMContext):
    if message.video:
        await state.update_data('')
        tg_id = message.from_user.id
        media_id = f"{message.video.file_id}"
        caption = message.caption
        post_type = 3
        first_name = message.from_user.first_name
        await db.create_post(tg_id, first_name, caption, post_type, media_id)
        await message.answer("–¢–≤–æ–π –ø–æ—Å—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!", reply_markup=await kb.get_main(tg_id))
        await state.clear()


@rt.message(Post.post, F.text)
async def text_message(message: Message, state: FSMContext):
    if message.text:
        await state.update_data('')
        tg_id = message.from_user.id
        caption = message.text
        first_name = message.from_user.first_name
        post_type = 1
        await db.create_post(tg_id, first_name, caption, post_type)
        await message.answer("–¢–≤–æ–π –ø–æ—Å—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!", reply_markup=await kb.get_main(tg_id))
        await state.clear()

@rt.callback_query(F.data=='help')
async def help(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('ü§ñ –†–∞–∑—Ä–∞–±–æ—á–∏–∫ –±–æ—Ç–∞: @locustt\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–µ–º—É')

@rt.callback_query(F.data=='rules')
async def rules(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('üî¥–ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–Ø –ö–ê–ù–ê–õ–ê –ù–ï –ù–ï–°–Å–¢ –û–¢–í–ï–°–¢–í–ï–ù–ù–û–°–¢–¨ –ó–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–Æ –ö–û–ù–¢–ï–ù–¢–ê\nüî•–ü—Ä–µ–¥–ª–∞–≥–∞—è –ø–æ—Å—Ç –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\nüü£–ö–û–†–†–ï–ö–¢–ù–û–°–¢–¨ –ó–ê–ü–ò–°–ò\n1. –ù–∏–∫–∞–∫–∏—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—é–±—ã—Ö —Ñ–∞–∫—Ç–æ–≤(–≤–Ω–µ—à–Ω–æ—Å—Ç—å, –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ç.–ø.)\n2. 18+ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω(–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—É–∂–¥–∞–µ—Ç –ø–æ–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)\nüü£–£–î–ê–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò\n–ï—Å–ª–∏ –≤—ã –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏ –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã –∑–∞–ø–∏—Å—å—é, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞–±–ª–∏–∫–∞ —Å –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–π –ø—Ä–æ—Å—å–±–æ–π –æ–± —É–¥–∞–ª–µ–Ω–∏–∏. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥—É —É–≥—Ä–æ–∑—ã –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –æ–Ω–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –Ω–µ —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å—å.')

@rt.callback_query(F.data=='contacts')
async def contacts(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('ü§ñ –†–∞–∑—Ä–∞–±–æ—á–∏–∫ –±–æ—Ç–∞: @locustt\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞:\n@smashloc\n@looooooooooooooolk\n@ateget\n\n–í–ù–ò–ú–ê–ù–ò–ï, –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö –ë–û–¢–ê –ù–ï –ò–ú–ï–ï–¢ –û–¢–ù–û–®–ï–ù–ò–Ø –ö –ö–ê–ù–ê–õ–ê–ú –ò –ù–ï –ù–ï–°–ï–¢ –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨ –ó–ê –ò–• –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–¨')

@rt.callback_query(F.data=='admin_panel')
async def admin_panel(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    tg_id = callback.from_user.id
    admin = await db.check_admin(tg_id)
    if admin == True:
        await callback.message.answer('–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨', reply_markup=kb.admin_panel)
    if admin == False:
        await callback.message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω!')

@rt.callback_query(F.data=='check_posts')
async def all_posts(callback: CallbackQuery):
    await callback.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å—Ç–æ–≤')
    posts = {}
    all_posts = await db.get_all_posts()
    for post in all_posts:
        posts.update({post[0]: {'tg_id':post[1], 'first_name':post[2], 'media_id':post[3], 'caption':post[4], 'type':post[-1]}})
        if posts[post[0]].get('type') == 1:
            first_name = posts[post[0]].get('first_name')
            caption = posts[post[0]].get('caption')
            await callback.message.answer(f'üë§ {first_name}\n\n{caption}', reply_markup=await kb.post_settings(tg_id=post[1], post_id=post[0]))
        elif posts[post[0]].get('type') == 2:
            first_name = posts[post[0]].get('first_name')
            caption = posts[post[0]].get('caption')
            photo_id = posts[post[0]].get('media_id')
            if caption is None:
                caption=''
                await callback.message.answer_photo(photo=f'{photo_id}', caption=f'üë§ {first_name}\n\n{caption}', reply_markup=await kb.post_settings(tg_id=post[1], post_id=post[0]))
            else:
                await callback.message.answer_photo(photo=f'{photo_id}', caption=f'üë§ {first_name}\n\n{caption}', reply_markup=await kb.post_settings(tg_id=post[1], post_id=post[0]))
        elif posts[post[0]].get('type') == 3:
            first_name = posts[post[0]].get('first_name')
            caption = posts[post[0]].get('caption')
            video_id = posts[post[0]].get('media_id')
            if caption is None:
                caption = ''
                await callback.message.answer_video(video=f'{video_id}', caption=f'üë§ {first_name}\n\n{caption}', reply_markup=await kb.post_settings(tg_id=post[1], post_id=post[0]))
            else:
                await callback.message.answer_video(video=f'{video_id}', caption=f'üë§ {first_name}\n\n{caption}', reply_markup=await kb.post_settings(tg_id=post[1], post_id=post[0]))

@rt.callback_query(F.data=='to_main')
async def main(callback: CallbackQuery):
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    tg_id = callback.from_user.id
    first_name = callback.from_user.first_name
    await db.set_user(tg_id, first_name)
    await  callback.message.answer('–ë–æ—Ç-–ø—Ä–µ–¥–ª–æ–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!(—Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∞–¥–º–∏–Ω–∞)', reply_markup=await kb.get_main(tg_id))

@rt.callback_query(F.data == 'channels')
async def manage_channels(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:', reply_markup=await kb.manage_channels())

@rt.callback_query(F.data.startswith('ban_'))
async def ban(callback: CallbackQuery):
    await callback.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –±–∞–Ω–∞!')
    tg_id = callback.data.split('_')[1]
    await callback.message.delete()
    ban = await db.ban_user(tg_id)
    if ban == True:
        await callback.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω!')
    if ban == False:
        await callback.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!')
    await db.delete_user_posts(tg_id)

@rt.callback_query(F.data.startswith('channel_'))
async def manage_channel(callback: CallbackQuery):
    channel_id = callback.data.split('_')[1]
    print(channel_id)
    channel = await db.get_channel(channel_id)
    await callback.answer(f'–¢—ã –≤—ã–±—Ä–∞–ª {channel[2]}')
    await callback.message.answer(f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: {channel[2]}', reply_markup = await manage_channel(channel_id))

@rt.callback_query(F.data.startswith('delete_'))
async def ban(callback: CallbackQuery):
    post_id = callback.data.split('_')[1]
    await db.delete_post(post_id)
    await callback.answer('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω!')
    await callback.message.delete()

@rt.callback_query(F.data.startswith('on_post-'))
async def choose_channel(callback: CallbackQuery):
    await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª')

    post_id = callback.data.split('-')[1]
    await callback.message.delete()
    channels_setting = await kb.get_channels(post_id)
    if channels_setting is None:
        await callback.message.answer('–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!')
    else:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', reply_markup=await kb.get_channels(post_id))

@rt.callback_query(F.data.startswith('_'))
async def post_in_channel(callback: CallbackQuery, bot: Bot):
    await callback.answer('–ü–æ—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è')
    await callback.message.delete()
    channel = re.split('[_.]', callback.data)[1]
    post_get = re.split('[_.]', callback.data)[-1]
    post_id = list(post_get)
    post_by = await db.get_post(post_id=post_id[1])
    post_data = list(post_by)
    if post_data[-1] == 1:
        await bot.send_message(chat_id=channel, text=f"{post_data[4]}")
    if post_data[-1] == 2:
        if post_data[4] is None:
            await bot.send_photo(chat_id=channel, photo=f"{post_data[3]}")
        else: await bot.send_photo(chat_id=channel, photo=f"{post_data[3]}", caption=f"{post_data[4]}")
    if post_data[-1] == 3:
        if post_data[4] is None:
            await bot.send_video(chat_id=channel, video=f"{post_data[3]}")
        else: await bot.send_video(chat_id=channel, video=f"{post_data[3]}", caption=f"{post_data[4]}")
    await callback.message.answer('–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
    await db.delete_post(post_id[1])

@rt.message(Command('admin'))
async def new_admin(message: Message):
    text = message.text.split(maxsplit=1)[1]
    if message.from_user.id == 1175527638:
        add = await db.add_admin(tg_id=text)
        if add == True:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!')
        if add == False:
            await message.answer('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω!')
    else:
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω!')

@rt.message(Command('unadmin'))
async def new_admin(message: Message):
    text = message.text.split(maxsplit=1)[1]
    if message.from_user.id == 1175527638:
        admin = await db.delete_admin(tg_id=text)
        if admin == True:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω!')
        if admin == False:
            await message.answer('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω!')
    else:
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω!')

@rt.message(Command('unban'))
async def new_admin(message: Message):
    text = message.text.split(maxsplit=1)[1]
    if message.from_user.id == 1175527638:
        user_ban = await db.unban_user(tg_id=text)
        if user_ban == True:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω!')
        if user_ban == False:
            await message.answer('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–Ω–µ!')
    else:
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω!')